// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/RcppCCTZ.h"
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

// example0
void example0();
RcppExport SEXP RcppCCTZ_example0() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    example0();
    return R_NilValue;
END_RCPP
}
// helloMoon
Rcpp::CharacterVector helloMoon(bool verbose);
RcppExport SEXP RcppCCTZ_helloMoon(SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(helloMoon(verbose));
    return rcpp_result_gen;
END_RCPP
}
// example1
void example1();
RcppExport SEXP RcppCCTZ_example1() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    example1();
    return R_NilValue;
END_RCPP
}
// example2
int example2();
RcppExport SEXP RcppCCTZ_example2() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(example2());
    return rcpp_result_gen;
END_RCPP
}
// example3
void example3();
RcppExport SEXP RcppCCTZ_example3() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    example3();
    return R_NilValue;
END_RCPP
}
// example4
void example4();
RcppExport SEXP RcppCCTZ_example4() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    example4();
    return R_NilValue;
END_RCPP
}
// exampleFormat
void exampleFormat();
RcppExport SEXP RcppCCTZ_exampleFormat() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    exampleFormat();
    return R_NilValue;
END_RCPP
}
// tzDiff
double tzDiff(const std::string tzfrom, const std::string tzto, Rcpp::Datetime dt, bool verbose);
static SEXP RcppCCTZ_tzDiff_try(SEXP tzfromSEXP, SEXP tztoSEXP, SEXP dtSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const std::string >::type tzfrom(tzfromSEXP);
    Rcpp::traits::input_parameter< const std::string >::type tzto(tztoSEXP);
    Rcpp::traits::input_parameter< Rcpp::Datetime >::type dt(dtSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(tzDiff(tzfrom, tzto, dt, verbose));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP RcppCCTZ_tzDiff(SEXP tzfromSEXP, SEXP tztoSEXP, SEXP dtSEXP, SEXP verboseSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(RcppCCTZ_tzDiff_try(tzfromSEXP, tztoSEXP, dtSEXP, verboseSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// toTz
Rcpp::Datetime toTz(Rcpp::Datetime dt, const std::string tzfrom, const std::string tzto, bool verbose);
static SEXP RcppCCTZ_toTz_try(SEXP dtSEXP, SEXP tzfromSEXP, SEXP tztoSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::Datetime >::type dt(dtSEXP);
    Rcpp::traits::input_parameter< const std::string >::type tzfrom(tzfromSEXP);
    Rcpp::traits::input_parameter< const std::string >::type tzto(tztoSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(toTz(dt, tzfrom, tzto, verbose));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP RcppCCTZ_toTz(SEXP dtSEXP, SEXP tzfromSEXP, SEXP tztoSEXP, SEXP verboseSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(RcppCCTZ_toTz_try(dtSEXP, tzfromSEXP, tztoSEXP, verboseSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// formatDatetime
Rcpp::CharacterVector formatDatetime(Rcpp::DatetimeVector dtv, std::string fmt, std::string lcltzstr, std::string tgttzstr);
static SEXP RcppCCTZ_formatDatetime_try(SEXP dtvSEXP, SEXP fmtSEXP, SEXP lcltzstrSEXP, SEXP tgttzstrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::DatetimeVector >::type dtv(dtvSEXP);
    Rcpp::traits::input_parameter< std::string >::type fmt(fmtSEXP);
    Rcpp::traits::input_parameter< std::string >::type lcltzstr(lcltzstrSEXP);
    Rcpp::traits::input_parameter< std::string >::type tgttzstr(tgttzstrSEXP);
    rcpp_result_gen = Rcpp::wrap(formatDatetime(dtv, fmt, lcltzstr, tgttzstr));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP RcppCCTZ_formatDatetime(SEXP dtvSEXP, SEXP fmtSEXP, SEXP lcltzstrSEXP, SEXP tgttzstrSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(RcppCCTZ_formatDatetime_try(dtvSEXP, fmtSEXP, lcltzstrSEXP, tgttzstrSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// parseDatetime
Rcpp::DatetimeVector parseDatetime(Rcpp::CharacterVector svec, std::string fmt, std::string tzstr);
static SEXP RcppCCTZ_parseDatetime_try(SEXP svecSEXP, SEXP fmtSEXP, SEXP tzstrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type svec(svecSEXP);
    Rcpp::traits::input_parameter< std::string >::type fmt(fmtSEXP);
    Rcpp::traits::input_parameter< std::string >::type tzstr(tzstrSEXP);
    rcpp_result_gen = Rcpp::wrap(parseDatetime(svec, fmt, tzstr));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP RcppCCTZ_parseDatetime(SEXP svecSEXP, SEXP fmtSEXP, SEXP tzstrSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(RcppCCTZ_parseDatetime_try(svecSEXP, fmtSEXP, tzstrSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// formatDouble
Rcpp::CharacterVector formatDouble(Rcpp::NumericVector secv, Rcpp::NumericVector nanov, std::string fmt, std::string tgttzstr);
static SEXP RcppCCTZ_formatDouble_try(SEXP secvSEXP, SEXP nanovSEXP, SEXP fmtSEXP, SEXP tgttzstrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type secv(secvSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type nanov(nanovSEXP);
    Rcpp::traits::input_parameter< std::string >::type fmt(fmtSEXP);
    Rcpp::traits::input_parameter< std::string >::type tgttzstr(tgttzstrSEXP);
    rcpp_result_gen = Rcpp::wrap(formatDouble(secv, nanov, fmt, tgttzstr));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP RcppCCTZ_formatDouble(SEXP secvSEXP, SEXP nanovSEXP, SEXP fmtSEXP, SEXP tgttzstrSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(RcppCCTZ_formatDouble_try(secvSEXP, nanovSEXP, fmtSEXP, tgttzstrSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// parseDouble
Rcpp::NumericMatrix parseDouble(Rcpp::CharacterVector svec, std::string fmt, std::string tzstr);
static SEXP RcppCCTZ_parseDouble_try(SEXP svecSEXP, SEXP fmtSEXP, SEXP tzstrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type svec(svecSEXP);
    Rcpp::traits::input_parameter< std::string >::type fmt(fmtSEXP);
    Rcpp::traits::input_parameter< std::string >::type tzstr(tzstrSEXP);
    rcpp_result_gen = Rcpp::wrap(parseDouble(svec, fmt, tzstr));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP RcppCCTZ_parseDouble(SEXP svecSEXP, SEXP fmtSEXP, SEXP tzstrSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(RcppCCTZ_parseDouble_try(svecSEXP, fmtSEXP, tzstrSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// now
void now();
static SEXP RcppCCTZ_now_try() {
BEGIN_RCPP
    now();
    return R_NilValue;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP RcppCCTZ_now() {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(RcppCCTZ_now_try());
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}

// validate (ensure exported C++ functions exist before calling them)
static int RcppCCTZ_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("double(*tzDiff)(const std::string,const std::string,Rcpp::Datetime,bool)");
        signatures.insert("Rcpp::Datetime(*toTz)(Rcpp::Datetime,const std::string,const std::string,bool)");
        signatures.insert("Rcpp::CharacterVector(*formatDatetime)(Rcpp::DatetimeVector,std::string,std::string,std::string)");
        signatures.insert("Rcpp::DatetimeVector(*parseDatetime)(Rcpp::CharacterVector,std::string,std::string)");
        signatures.insert("Rcpp::CharacterVector(*formatDouble)(Rcpp::NumericVector,Rcpp::NumericVector,std::string,std::string)");
        signatures.insert("Rcpp::NumericMatrix(*parseDouble)(Rcpp::CharacterVector,std::string,std::string)");
        signatures.insert("void(*now)()");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP RcppCCTZ_RcppExport_registerCCallable() { 
    R_RegisterCCallable("RcppCCTZ", "RcppCCTZ_tzDiff", (DL_FUNC)RcppCCTZ_tzDiff_try);
    R_RegisterCCallable("RcppCCTZ", "RcppCCTZ_toTz", (DL_FUNC)RcppCCTZ_toTz_try);
    R_RegisterCCallable("RcppCCTZ", "RcppCCTZ_formatDatetime", (DL_FUNC)RcppCCTZ_formatDatetime_try);
    R_RegisterCCallable("RcppCCTZ", "RcppCCTZ_parseDatetime", (DL_FUNC)RcppCCTZ_parseDatetime_try);
    R_RegisterCCallable("RcppCCTZ", "RcppCCTZ_formatDouble", (DL_FUNC)RcppCCTZ_formatDouble_try);
    R_RegisterCCallable("RcppCCTZ", "RcppCCTZ_parseDouble", (DL_FUNC)RcppCCTZ_parseDouble_try);
    R_RegisterCCallable("RcppCCTZ", "RcppCCTZ_now", (DL_FUNC)RcppCCTZ_now_try);
    R_RegisterCCallable("RcppCCTZ", "RcppCCTZ_RcppExport_validate", (DL_FUNC)RcppCCTZ_RcppExport_validate);
    return R_NilValue;
}
