// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_RcppCCTZ_RCPPEXPORTS_H_GEN_
#define RCPP_RcppCCTZ_RCPPEXPORTS_H_GEN_

#include <Rcpp.h>

namespace RcppCCTZ {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("RcppCCTZ", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("RcppCCTZ", "RcppCCTZ_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in RcppCCTZ");
            }
        }
    }

    inline double tzDiff(const std::string tzfrom, const std::string tzto, Rcpp::Datetime dt, bool verbose = false) {
        typedef SEXP(*Ptr_tzDiff)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_tzDiff p_tzDiff = NULL;
        if (p_tzDiff == NULL) {
            validateSignature("double(*tzDiff)(const std::string,const std::string,Rcpp::Datetime,bool)");
            p_tzDiff = (Ptr_tzDiff)R_GetCCallable("RcppCCTZ", "RcppCCTZ_tzDiff");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_tzDiff(Rcpp::wrap(tzfrom), Rcpp::wrap(tzto), Rcpp::wrap(dt), Rcpp::wrap(verbose));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline Rcpp::Datetime toTz(Rcpp::Datetime dt, const std::string tzfrom, const std::string tzto, bool verbose = false) {
        typedef SEXP(*Ptr_toTz)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_toTz p_toTz = NULL;
        if (p_toTz == NULL) {
            validateSignature("Rcpp::Datetime(*toTz)(Rcpp::Datetime,const std::string,const std::string,bool)");
            p_toTz = (Ptr_toTz)R_GetCCallable("RcppCCTZ", "RcppCCTZ_toTz");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_toTz(Rcpp::wrap(dt), Rcpp::wrap(tzfrom), Rcpp::wrap(tzto), Rcpp::wrap(verbose));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::Datetime >(rcpp_result_gen);
    }

    inline Rcpp::CharacterVector formatDatetime(Rcpp::DatetimeVector dtv, std::string fmt = "%Y-%m-%dT%H:%M:%E*S%Ez", std::string lcltzstr = "UTC", std::string tgttzstr = "UTC") {
        typedef SEXP(*Ptr_formatDatetime)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_formatDatetime p_formatDatetime = NULL;
        if (p_formatDatetime == NULL) {
            validateSignature("Rcpp::CharacterVector(*formatDatetime)(Rcpp::DatetimeVector,std::string,std::string,std::string)");
            p_formatDatetime = (Ptr_formatDatetime)R_GetCCallable("RcppCCTZ", "RcppCCTZ_formatDatetime");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_formatDatetime(Rcpp::wrap(dtv), Rcpp::wrap(fmt), Rcpp::wrap(lcltzstr), Rcpp::wrap(tgttzstr));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::CharacterVector >(rcpp_result_gen);
    }

    inline Rcpp::DatetimeVector parseDatetime(Rcpp::CharacterVector svec, std::string fmt = "%Y-%m-%dT%H:%M:%E*S%Ez", std::string tzstr = "UTC") {
        typedef SEXP(*Ptr_parseDatetime)(SEXP,SEXP,SEXP);
        static Ptr_parseDatetime p_parseDatetime = NULL;
        if (p_parseDatetime == NULL) {
            validateSignature("Rcpp::DatetimeVector(*parseDatetime)(Rcpp::CharacterVector,std::string,std::string)");
            p_parseDatetime = (Ptr_parseDatetime)R_GetCCallable("RcppCCTZ", "RcppCCTZ_parseDatetime");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_parseDatetime(Rcpp::wrap(svec), Rcpp::wrap(fmt), Rcpp::wrap(tzstr));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::DatetimeVector >(rcpp_result_gen);
    }

    inline Rcpp::CharacterVector formatDouble(Rcpp::NumericVector secv, Rcpp::NumericVector nanov, std::string fmt = "%Y-%m-%dT%H:%M:%E*S%Ez", std::string tgttzstr = "UTC") {
        typedef SEXP(*Ptr_formatDouble)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_formatDouble p_formatDouble = NULL;
        if (p_formatDouble == NULL) {
            validateSignature("Rcpp::CharacterVector(*formatDouble)(Rcpp::NumericVector,Rcpp::NumericVector,std::string,std::string)");
            p_formatDouble = (Ptr_formatDouble)R_GetCCallable("RcppCCTZ", "RcppCCTZ_formatDouble");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_formatDouble(Rcpp::wrap(secv), Rcpp::wrap(nanov), Rcpp::wrap(fmt), Rcpp::wrap(tgttzstr));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::CharacterVector >(rcpp_result_gen);
    }

    inline Rcpp::NumericMatrix parseDouble(Rcpp::CharacterVector svec, std::string fmt = "%Y-%m-%dT%H:%M:%E*S%Ez", std::string tzstr = "UTC") {
        typedef SEXP(*Ptr_parseDouble)(SEXP,SEXP,SEXP);
        static Ptr_parseDouble p_parseDouble = NULL;
        if (p_parseDouble == NULL) {
            validateSignature("Rcpp::NumericMatrix(*parseDouble)(Rcpp::CharacterVector,std::string,std::string)");
            p_parseDouble = (Ptr_parseDouble)R_GetCCallable("RcppCCTZ", "RcppCCTZ_parseDouble");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_parseDouble(Rcpp::wrap(svec), Rcpp::wrap(fmt), Rcpp::wrap(tzstr));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::NumericMatrix >(rcpp_result_gen);
    }

    inline void now() {
        typedef SEXP(*Ptr_now)();
        static Ptr_now p_now = NULL;
        if (p_now == NULL) {
            validateSignature("void(*now)()");
            p_now = (Ptr_now)R_GetCCallable("RcppCCTZ", "RcppCCTZ_now");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_now();
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
    }

}

#endif // RCPP_RcppCCTZ_RCPPEXPORTS_H_GEN_
